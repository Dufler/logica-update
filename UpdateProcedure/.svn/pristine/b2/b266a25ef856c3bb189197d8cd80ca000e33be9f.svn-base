package it.ltc.logica.update;

import java.io.File;
import java.util.List;

import it.ltc.logica.utilities.ftp.FTPUtility;

public class UpdateProcedure {

	private static final String localPath = "C:/Users/Damiano/workspace-rcp/Update/";
	
	private static final String rootFile = "site.xml";
	private static final String artifactFile = "artifacts.jar";
	private static final String contentFile = "content.jar";
	private static final String indexFile = "index.html";
	private static final String featuresFolderPath = "features/";
	private static final String pluginsFolderPath = "plugins/";
	
	private static final String ftpHost = "test.services.ltc-logistics.it";
	private static final String ftpUser = "logica-update";
	private static final String ftpPassword = "update";
	
	private static FTPUtility ftp;
	
	public static void main(String[] args) {
		System.out.println("Procedura avviata!");
		ftp = new FTPUtility(ftpHost, ftpUser, ftpPassword);
		//Elimino il file radice
		boolean deleteRoot = ftp.deleteFile(rootFile);
		if (!deleteRoot)
			System.out.println("(Warning) non è stato eliminato il file radice.");
		//Elimino il file artifact
		boolean deleteArtifact = ftp.deleteFile(artifactFile);
		if (!deleteArtifact)
			System.out.println("(Warning) non è stato eliminato il file artifact.");
		//Elimino il file content
		boolean deleteContent = ftp.deleteFile(contentFile);
		if (!deleteContent)
			System.out.println("(Warning) non è stato eliminato il file content.");
		//Elimino il file index
		boolean deleteIndex = ftp.deleteFile(indexFile);
		if (!deleteIndex)
			System.out.println("(Warning) non è stato eliminato il file index.");
		//Elimino le vecchie features
		List<String> features = ftp.getFiles(featuresFolderPath);
		int featuresEliminate = eliminaFiles(featuresFolderPath, features);
		if (featuresEliminate != features.size())
			System.out.println("(Warning) differenza nel numero di features eliminate. " + featuresEliminate + " contro " + features.size());
		//Elimino i vecchi plugins
		List<String> plugins = ftp.getFiles(pluginsFolderPath);
		int pluginsEliminati = eliminaFiles(pluginsFolderPath, plugins);
		if (pluginsEliminati != plugins.size())
			System.out.println("(Warning) differenza nel numero di plugins eliminati. " + pluginsEliminati + " contro " + plugins.size());
		//Eseguo l'upload dei files
		boolean uploadRoot = ftp.upload(localPath + rootFile, rootFile);
		if (!uploadRoot)
			System.out.println("(Error) non è stato caricato il file radice!");
		boolean uploadArtifact = ftp.upload(localPath + artifactFile, artifactFile);
		if (!uploadArtifact)
			System.out.println("(Error) non è stato caricato il file artifact!");
		boolean uploadContent = ftp.upload(localPath + contentFile, contentFile);
		if (!uploadContent)
			System.out.println("(Error) non è stato caricato il file content!");
		boolean uploadIndex = ftp.upload(localPath + indexFile, indexFile);
		if (!uploadIndex)
			System.out.println("(Error) non è stato caricato il file index!");
		File featuresFolder = new File(localPath + featuresFolderPath);
		int featuresCaricate = caricaFiles(featuresFolderPath, featuresFolder.list());
		System.out.println("Sono state caricate " + featuresCaricate + " features!");
		File pluginsFolder = new File(localPath + pluginsFolderPath);
		int pluginsCaricati = caricaFiles(pluginsFolderPath, pluginsFolder.list());
		System.out.println("Sono state caricati " + pluginsCaricati + " plugins!");
		System.out.println("Procedura terminata!");
	}
	
	private static int eliminaFiles(String folder, List<String> files) {
		int fileEliminati = 0;
		for (String file : files) {
			boolean delete = ftp.deleteFile(folder + file);
			if (delete)
				fileEliminati += 1;
		}
		return fileEliminati;
	}
	
	private static int caricaFiles(String folder, String[] files) {
		int fileCaricati = 0;
		for (String file : files) {
			boolean upload = ftp.upload(localPath + folder + file, folder + file);
			if (upload)
				fileCaricati += 1;
		}
		return fileCaricati;
	}

}
